Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}' ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: "Name"
          Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'igw' ]]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'NAT', '${self:service}', '${self:provider.stage}' ]]
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone:
          Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
        - Key: "Name"
          Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'public', 'subnet', 'A' ]]
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone:
          Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'} 
      Tags:
      - Key: Name
        Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'public', 'subnet', 'B' ]]
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      AvailabilityZone:
          Fn::Select:
          - 2
          - Fn::GetAZs: {Ref: 'AWS::Region'} 
      Tags:
      - Key: Name
        Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'public', 'subnet', 'C' ]]

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone:
          Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
      - Key: Name
        Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'private', 'subnet', 'A' ]]
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone:
          Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
      - Key: Name
        Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'private', 'subnet', 'B' ]]
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone:
          Fn::Select:
          - 2
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
      - Key: Name
        Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'private', 'subnet', 'C' ]]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRouteTableARoute1: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRouteTableBRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRouteTableCRoute1: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC

  FlowLogs:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceType: "VPC"
      ResourceId:
        Ref: "VPC"
      TrafficType: "ALL"
      LogDestinationType: "cloud-watch-logs"
      LogGroupName: ${self:service}-${self:provider.stage}-FlowLogs
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - "IamRoleForFlowLogs"
          - "Arn"
  FlowLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: ${self:service}-${self:provider.stage}-FlowLogs
  IamRoleForFlowLogs:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ${self:service}-${self:provider.stage}-roleFlowLogsToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "vpc-flow-logs.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "allow-access-to-cw-logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Resource: "*"

  VpcDefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the VPC
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ '${self:service}', '${self:provider.stage}', 'default-sg' ]]

      SecurityGroupEgress:
        - FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
          Description: ""
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - FromPort: 5432
          ToPort: 5432
          IpProtocol: "tcp"
          Description: "Allow connections for QuickSight us-east-1"
          CidrIp: "52.23.63.224/27"
